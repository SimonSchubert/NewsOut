apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'co.touchlab.kotlinxcodesync'

def ktor_version = "1.1.5"
def kotlin_version = "1.3.31"
def klock_version = "1.4.0"
def coroutines_version = "1.2.1"
def sqldelight_version = "1.1.3"
def serialization_version = "0.11.0"

sqldelight {
    SqlDelightDatabase {
        packageName = "com.inspiredandroid.newsout"
        sourceFolders = ["sqldelight"]
        schemaOutputDirectory = file("build/dbs")
    }
}

repositories {
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/soywiz/soywiz" }
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
        }

        fromPreset(presets.jvm, 'android')

        fromPreset(presets.iosX64, 'iosX64')
        fromPreset(presets.iosArm64, 'iosArm64')
        configure([iosX64, iosArm64]) {
            compilations.main.outputKinds('FRAMEWORK')
        }
    }

    sourceSets {
        configure([iosX64Main, iosArm64Main]) {
            dependsOn iosMain
        }

        commonMain.dependencies {
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            implementation "io.ktor:ktor-client-core:$ktor_version"
            implementation "io.ktor:ktor-client-auth:$ktor_version"
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        }

        androidMain.dependencies {
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
            implementation "com.squareup.sqldelight:runtime-jvm:$sqldelight_version"
            implementation "io.ktor:ktor-client-android:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
        }

        androidTest.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            api "io.ktor:ktor-client-mock-jvm:$ktor_version"
        }

        iosMain.dependencies {
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
            implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            implementation "io.ktor:ktor-client-ios:$ktor_version"
        }

        iosArm64Main.dependencies {
            implementation "io.ktor:ktor-client-ios-iosarm64:$ktor_version"
        }

        iosX64Main.dependencies {
            implementation "io.ktor:ktor-client-ios-iosx64:$ktor_version"
        }

        commonTest.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        }

        iosTest.dependencies {
            api "io.ktor:ktor-client-mock-native:$ktor_version"
        }
    }
}

xcode {
    projectPath = "../native/client-mpp-ios.xcodeproj"
    target = "client-mpp-ios"
}

dependencies {
    commonMainApi "com.soywiz:klock-metadata:$klock_version" // Common
    androidMainApi "com.soywiz:klock-android:$klock_version" // Android
    iosX64MainApi "com.soywiz:klock-iosx64:$klock_version" // iOS Simulator
    iosArm64MainApi "com.soywiz:klock-iosarm64:$klock_version" // Newer iOS 64-bit devices
}

configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

    inputs.property "mode", mode
    dependsOn kotlin.targets.ios.compilations.main.linkTaskName("FRAMEWORK", mode)

    from { kotlin.targets.ios.compilations.main.getBinary("FRAMEWORK", mode).parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}